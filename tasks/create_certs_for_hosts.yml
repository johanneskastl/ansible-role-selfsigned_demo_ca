---
# selfsigned_demo_ca/tasks/create_certs_for_hosts.yml

#
#
#
- name: 'Prepare input for subject_alt_name if only IPs were desired'
  ansible.builtin.set_fact:
    subject_alt_name: "IP:{{ ansible_default_ipv4.address }}"
  when: 'use_ip_address_only | bool'

- name: 'Prepare input for subject_alt_name if hostnames are to be used'
  ansible.builtin.set_fact:
    subject_alt_name: "DNS:{{ ansible_host }},DNS:{{ ansible_fqdn }}"
  when: 'not use_ip_address_only | bool'

#
# Tasks on the host
#

- name: 'Create the directory for the certificates'
  ansible.builtin.file:
    path: "{{ host_certs_target_folder }}"
    state: 'directory'
    owner: "{{ certs_file_user }}"
    group: "{{ certs_file_group }}"
    mode: "{{ certs_directory_mode }}"

- name: "Fix SELinux context for {{ host_certs_target_folder }}"
  ansible.builtin.file:
    path: "{{ host_certs_target_folder }}"
    state: 'directory'
    setype: "{{ selinux_setype }}"
  when:
    - 'ansible_selinux.status is defined'
    - 'ansible_selinux.status == "enabled"'

- name: 'Generate private key on the host'
  ansible.builtin.openssl_privatekey:
    path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.key"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'Generate a CSR on the host'
  ansible.builtin.openssl_csr:
    path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.csr"
    privatekey_path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.key"
    country_name: DE
    organization_name: "{{ ca_organization_name }}"
    common_name: "{{ ansible_fqdn }}"
    subject_alt_name: "{{ subject_alt_name }}"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

#
# Tasks on localhost aka the ansible control host
#
- name: 'Fetch the CSR file from the host'
  ansible.builtin.fetch:
    src: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.csr"
    dest: "{{ ca_target_folder }}{{ ansible_fqdn }}.csr"
    flat: true

- name: 'Sign the CSR with CA key'
  ansible.builtin.openssl_certificate:
    path: "{{ ca_target_folder }}{{ ansible_fqdn }}.crt"
    csr_path: "{{ ca_target_folder }}{{ ansible_fqdn }}.csr"
    ownca_path: "{{ ca_target_folder }}{{ ca_crt_file }}"
    ownca_privatekey_path: "{{ ca_target_folder }}{{ ca_key_file }}"
    ownca_privatekey_passphrase: "{{ ca_key_passphrase }}"
    provider: ownca
  become: 'false'
  delegate_to: localhost
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

#
# Transfer the files back to the host
#
- name: 'Copy the fresh certificate back to the host'
  ansible.builtin.copy:
    src: "{{ ca_target_folder }}{{ ansible_fqdn }}.crt"
    dest: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.crt"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'Copy the CA certificate back to the host'
  ansible.builtin.copy:
    src: "{{ ca_target_folder }}{{ ca_crt_file }}"
    dest: "{{ host_certs_target_folder }}{{ ca_crt_file }}"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

#
# Fix user/group/permissions on the files
#
- name: 'Fix user, group and permissions on certificate files'
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group:  "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.key"
      owner: "{{ certs_file_user }}"
      group: "{{ certs_file_group }}"
      mode: "{{ certs_key_file_mode }}"
    - path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.csr"
      owner: "{{ certs_file_user }}"
      group: "{{ certs_file_group }}"
      mode: "{{ certs_file_mode }}"
    - path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.crt"
      owner: "{{ certs_file_user }}"
      group: "{{ certs_file_group }}"
      mode: "{{ certs_file_mode }}"
    - path: "{{ host_certs_target_folder }}{{ ca_crt_file }}"
      owner: "{{ certs_file_user }}"
      group: "{{ certs_file_group }}"
      mode: "{{ certs_file_mode }}"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"
