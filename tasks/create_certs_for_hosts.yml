---
# selfsigned_demo_ca/tasks/create_certs_for_hosts.yml

#
# Tasks on the host
#

- name: 'create the directory for the certificates'
  file:
    path: "{{ host_certs_target_folder }}"
    state: 'directory'
    owner: "{{ certs_file_user | default(default_certs_file_user) }}"
    group: "{{ certs_file_group | default(default_certs_file_group) }}"
    mode: "{{ certs_directory_mode | default(default_certs_directory_mode) }}"

- name: "fix SELinux context for {{ host_certs_target_folder }}"
  file:
    path: "{{ host_certs_target_folder }}"
    state: 'directory'
    setype: "{{ selinux_setype }}"
  when:
    - 'ansible_selinux.status is defined'
    - 'ansible_selinux.status == "enabled"'

- name: 'generate private key on the host'
  openssl_privatekey:
    path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.key"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'generate a CSR on the host'
  openssl_csr:
    path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.csr"
    privatekey_path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.key"
    country_name: DE
    organization_name: "{{ default_organization_name }}"
    common_name: "{{ ansible_fqdn }}"
    subject_alt_name: "DNS:{{ ansible_host }},DNS:{{ ansible_fqdn }}"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

#
# Tasks on localhost aka the ansible control host
#
- name: 'fetch the CSR file from the host'
  fetch:
    src: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.csr"
    dest: "{{ ca_target_folder }}{{ ansible_fqdn }}.csr"
    flat: true

- name: 'sign the CSR with CA key'
  openssl_certificate:
    path: "{{ ca_target_folder }}{{ ansible_fqdn }}.crt"
    csr_path: "{{ ca_target_folder }}{{ ansible_fqdn }}.csr"
    ownca_path: "{{ ca_target_folder }}{{ ca_crt_file }}"
    ownca_privatekey_path: "{{ ca_target_folder }}{{ ca_key_file }}"
    ownca_privatekey_passphrase: "{{ ownca_privatekey_passphrase }}"
    provider: ownca
  become: 'false'
  delegate_to: localhost
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

#
# Transfer the files back to the host
#
- name: 'copy the fresh certificate back to the host'
  copy:
    src: "{{ ca_target_folder }}{{ ansible_fqdn }}.crt"
    dest: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.crt"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'copy the CA certificate back to the host'
  copy:
    src: "{{ ca_target_folder }}{{ ca_crt_file }}"
    dest: "{{ host_certs_target_folder }}{{ ca_crt_file }}"
  # FIXME
  ignore_errors: "{{ ansible_check_mode }}"

#
# Fix user/group/permissions on the files
#
- name: 'fix user, group and permissions on certificate files'
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group:  "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.key"
      owner: "{{ certs_file_user | default(default_certs_file_user) }}"
      group: "{{ certs_file_group | default(default_certs_file_group) }}"
      mode: "{{ certs_key_file_mode | default(default_certs_key_file_mode) }}"
    - path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.csr"
      owner: "{{ certs_file_user | default(default_certs_file_user) }}"
      group: "{{ certs_file_group | default(default_certs_file_group) }}"
      mode: "{{ certs_file_mode | default(default_certs_file_mode) }}"
    - path: "{{ host_certs_target_folder }}{{ ansible_fqdn }}.crt"
      owner: "{{ certs_file_user | default(default_certs_file_user) }}"
      group: "{{ certs_file_group | default(default_certs_file_group) }}"
      mode: "{{ certs_file_mode | default(default_certs_file_mode) }}"
    - path: "{{ host_certs_target_folder }}{{ ca_crt_file }}"
      owner: "{{ certs_file_user | default(default_certs_file_user) }}"
      group: "{{ certs_file_group | default(default_certs_file_group) }}"
      mode: "{{ certs_file_mode | default(default_certs_file_mode) }}"
